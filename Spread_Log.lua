--local variables for API. Automatically generated by https://github.com/simpleavaster/gslua/blob/master/authors/sapphyrus/generate_api.lua 
local client_latency, client_set_clan_tag, client_log, client_draw_rectangle, client_draw_circle_outline, client_timestamp, client_draw_indicator, client_userid_to_entindex, client_world_to_screen, client_draw_gradient, client_set_event_callback = client.latency, client.set_clan_tag, client.log, client.draw_rectangle, client.draw_circle_outline, client.timestamp, client.draw_indicator, client.userid_to_entindex, client.world_to_screen, client.draw_gradient, client.set_event_callback 
local client_screen_size, client_draw_circle, client_trace_line, client_color_log, client_draw_text, client_delay_call, client_visible, client_exec, client_system_time = client.screen_size, client.draw_circle, client.trace_line, client.color_log, client.draw_text, client.delay_call, client.visible, client.exec, client.system_time 
local client_set_cvar, client_eye_position, client_draw_hitboxes, client_get_cvar, client_draw_line, client_camera_angles, client_draw_debug_text, client_random_int, client_random_float = client.set_cvar, client.eye_position, client.draw_hitboxes, client.get_cvar, client.draw_line, client.camera_angles, client.draw_debug_text, client.random_int, client.random_float 
local entity_get_local_player, entity_is_enemy, entity_is_dormant, entity_hitbox_position, entity_get_player_name, entity_get_steam64, entity_get_bounding_box, entity_get_all, entity_set_prop = entity.get_local_player, entity.is_enemy, entity.is_dormant, entity.hitbox_position, entity.get_player_name, entity.get_steam64, entity.get_bounding_box, entity.get_all, entity.set_prop 
local entity_is_alive, entity_get_player_weapon, entity_get_prop, entity_get_players, entity_get_classname = entity.is_alive, entity.get_player_weapon, entity.get_prop, entity.get_players, entity.get_classname 
local globals_realtime, globals_absoluteframetime, globals_tickcount, globals_lastoutgoingcommand, globals_curtime, globals_mapname, globals_tickinterval, globals_framecount, globals_frametime, globals_maxplayers = globals.realtime, globals.absoluteframetime, globals.tickcount, globals.lastoutgoingcommand, globals.curtime, globals.mapname, globals.tickinterval, globals.framecount, globals.frametime, globals.maxplayers 
local ui_new_slider, ui_new_combobox, ui_reference, ui_set_visible, ui_is_menu_open, ui_new_color_picker, ui_set_callback, ui_set, ui_new_checkbox, ui_new_hotkey, ui_new_button, ui_new_multiselect, ui_get = ui.new_slider, ui.new_combobox, ui.reference, ui.set_visible, ui.is_menu_open, ui.new_color_picker, ui.set_callback, ui.set, ui.new_checkbox, ui.new_hotkey, ui.new_button, ui.new_multiselect, ui.get 
local math_ceil, math_tan, math_log10, math_randomseed, math_cos, math_sinh, math_random, math_huge, math_pi, math_max, math_atan2, math_ldexp, math_floor, math_sqrt, math_deg, math_atan, math_fmod = math.ceil, math.tan, math.log10, math.randomseed, math.cos, math.sinh, math.random, math.huge, math.pi, math.max, math.atan2, math.ldexp, math.floor, math.sqrt, math.deg, math.atan, math.fmod 
local math_acos, math_pow, math_abs, math_min, math_sin, math_frexp, math_log, math_tanh, math_exp, math_modf, math_cosh, math_asin, math_rad = math.acos, math.pow, math.abs, math.min, math.sin, math.frexp, math.log, math.tanh, math.exp, math.modf, math.cosh, math.asin, math.rad 
local table_maxn, table_foreach, table_sort, table_remove, table_foreachi, table_move, table_getn, table_concat, table_insert = table.maxn, table.foreach, table.sort, table.remove, table.foreachi, table.move, table.getn, table.concat, table.insert 
local string_find, string_format, string_rep, string_gsub, string_len, string_gmatch, string_dump, string_match, string_reverse, string_byte, string_char, string_upper, string_lower, string_sub = string.find, string.format, string.rep, string.gsub, string.len, string.gmatch, string.dump, string.match, string.reverse, string.byte, string.char, string.upper, string.lower, string.sub 
--end of local variables 

-- references
local reference = {
    player_list     = ui_reference("PLAYERS", "Players", "player list"),
    force_yaw       = ui_reference("PLAYERS", "Adjustments", "Force yaw"),
    force_yaw_value = ui_reference("PLAYERS", "Adjustments", "Force yaw value"),
    reset_all		= ui_reference("PLAYERS", "Players", "Reset all")
}

-- new menu elements
local menu = {
    anti_aim_logging = ui_new_checkbox("RAGE", "Other", "Anti-aim logging"),
    visualize_anti_aim_logs = ui_new_checkbox("RAGE", "Other", "Visualize anti-aim logs")
}

-- variables
local vars = {
    spots = { },
    choked
}

local function distance_2d(x1, y1, x2, y2)
    return math_floor(math_sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2) * 0.0833)
end

local function round_to_nearest(number, multiple)
    local half = multiple / 2

    return number + half - (number + half) % multiple
end

local function is_moving(index)
	local x = entity_get_prop(index, "m_vecVelocity[0]")
	local y = entity_get_prop(index, "m_vecVelocity[1]")
	local z = entity_get_prop(index, "m_vecVelocity[2]")

	return math_sqrt(x * x + y * y + z * z) > 1.0
end

local function normalize_yaw(yaw)
    while yaw > 180 do yaw = yaw - 360 end
    while yaw < -180 do yaw = yaw + 360 end

    return yaw
end

local function on_paint(ctx)
    if not ui_get(menu.anti_aim_logging) then
        return
    end

    local players = entity_get_players(true)
	if players == nil then
		return
	end

    for p=1, #players do
        local player_index = players[p]

        ui_set(reference.player_list, player_index)
        ui_set(reference.force_yaw, "-")
        ui_set(reference.force_yaw_value, 0) 

        local lx, ly, lz = entity_get_prop(player_index, "m_vecOrigin")
        if lx == nil then
            return
        end

        -- Just in case a log was somehow created while they where moving.
        if is_moving(player_index) then
            return
        end

        for s=1, #vars.spots do
            local distance       = distance_2d(lx, ly, vars.spots[s][1], vars.spots[s][2])
            local spot_index     = vars.spots[s][5]
            local spot_yaw       = vars.spots[s][4]

            if spot_index == player_index and distance <= 3 then
                if ui_get(menu.visualize_anti_aim_logs) then
                    local x, y = client_world_to_screen(ctx, vars.spots[s][1], vars.spots[s][2], vars.spots[s][3])

                    if x ~= nil and y ~= nil then
                        client_draw_text(ctx, x, y - 8, 255, 255, 255, 155, "c-", 0, string_upper(entity_get_player_name(player_index)), "'S LOGGED ANGLE")
                        
                        if distance == 0 then
                            client_draw_text(ctx, x, y, 0, 170, 0, 155, "c-", 0, distance, "FT")   
                        elseif distance == 1 then
                            client_draw_text(ctx, x, y, 85, 255, 85, 155, "c-", 0, distance, "FT")   
                        elseif distance == 2 then
                            client_draw_text(ctx, x, y, 255, 255, 85, 155, "c-", 0, distance, "FT")   
                        elseif distance == 3 then
                            client_draw_text(ctx, x, y, 255, 170, 0, 155, "c-", 0, distance, "FT")   
                        end    
                    end
                end

                ui_set(reference.force_yaw, "Static")
                ui_set(reference.force_yaw_value, spot_yaw)
            end
        end
    end
end

local function on_player_hurt(e)
    if not ui_get(menu.anti_aim_logging) then
        return
    end
    
	local victim_userid, attacker_userid = e.userid, e.attacker
	if victim_userid == nil or attacker_userid == nil then
		return
	end

	local victim_entindex   = client_userid_to_entindex(victim_userid)
	local attacker_entindex = client_userid_to_entindex(attacker_userid)

    if attacker_entindex == entity_get_local_player() and entity_is_enemy(victim_entindex) then
        if e.hitgroup == 1 then
            local lx, ly, lz = entity_get_prop(victim_entindex, "m_vecOrigin")
            if lx == nil then
                return
            end

            local pitch, yaw, roll = entity_get_prop(victim_entindex, "m_angEyeAngles")
            if pitch == nil then
                return
            end

            local m_flLowerBodyYawTarget = entity_get_prop(victim_entindex, "m_flLowerBodyYawTarget")
            if m_flLowerBodyYawTarget == nil then
                return
            end

            -- We don't want to log head shots of m_flLowerBodyYawTarget flicks. This is extremely ghetto.
            if yaw == m_flLowerBodyYawTarget then
                return
            end

            -- We don't want to log headshots of moving players since we fully resolve them.
            if is_moving(victim_entindex) then
                return
            end

            -- This is here so we don't create another log at the exact same spot.
            for i=1, #vars.spots do
                local distance       = distance_2d(lx, ly, vars.spots[i][1], vars.spots[i][2])
                local spot_index     = vars.spots[i][5];
    
                if spot_index == victim_entindex and distance <= 3 then
                    return
                end
            end

            vars.spots[#vars.spots + 1] = { lx, ly, lz, normalize_yaw(yaw), victim_entindex }
        end
	end
end

local function on_game_newmap(e)
    vars.spots = { }
    ui_set(reference.reset_all, true)
end

local function on_cs_game_disconnected(e)
    vars.spots = { }
    ui_set(reference.reset_all, true)
end

local function on_round_prestart(e)
    ui_set(reference.reset_all, true)
end

local function anti_aim_logging_changed()
    ui_set(reference.reset_all, true)
end

client_set_event_callback("paint", on_paint)
client_set_event_callback("player_hurt", on_player_hurt)
client_set_event_callback("game_newmap", on_game_newmap)
client_set_event_callback("round_prestart", on_round_prestart)
client_set_event_callback("cs_game_disconnected", on_cs_game_disconnected)
ui_set_callback(menu.anti_aim_logging, anti_aim_logging_changed)